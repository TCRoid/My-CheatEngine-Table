<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>82</ID>
      <Description>"适用于 Workspace Fantasy v1.3.0 ~ v1.3.1"</Description>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"初始化"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$LUA}
if not OpenGameProcess("Workspace Fantasy.exe", true) then
    return
end

local classID = mono_findClass("SX", "PlayerSaveDataController")
local instance = mono_getClassInstance(classID)
if not instance then return end

local fields = mono_getClassFieldOffsets(classID)

pPlayerSaveDataController = instance
pPlayerSaveData = instance + fields.m_PlayerSaveData
PlayerSaveDataOffs = mono_getClassFieldOffsets("SX", "PlayerSaveData")

GameDefine = mono_getClassStaticFields("", "GameDefine")

{$ASM}




[DISABLE]
{$LUA}
pPlayerSaveDataController = nil
pPlayerSaveData = nil
PlayerSaveDataOffs = nil
GameDefine = nil

{$ASM}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>81</ID>
          <Description>"是否暂停时间"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:否
1:是
</DropDownList>
          <ShowAsSigned>1</ShowAsSigned>
          <VariableType>Byte</VariableType>
          <Address>GameDefine._IsPauseTime</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"玩家数据"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$LUA}
pPlayerSystem = readPointer(pPlayerSaveData) + PlayerSaveDataOffs.m_PlayerSystem
PlayerSystemOffs = mono_getClassFieldOffsets("SX", "PlayerSystem")

{$ASM}



[DISABLE]
{$LUA}
pPlayerSystem = nil
PlayerSystemOffs = nil

{$ASM}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4</ID>
              <Description>"时间"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$LUA}
pTimeData = readPointer(pPlayerSystem) + PlayerSystemOffs.m_TimeData

TimeDataOffs = mono_getClassFieldOffsets(mono_findClass("", "SXTimeData"))

{$ASM}


[DISABLE]
{$LUA}
pTimeData = nil
TimeDataOffs = nil

{$ASM}

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9</ID>
                  <Description>"Year"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Year</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>10</ID>
                  <Description>"Month"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Month</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>11</ID>
                  <Description>"Day"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Day</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>12</ID>
                  <Description>"Hours"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Hours</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>13</ID>
                  <Description>"Hours_24"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Hours_24</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14</ID>
                  <Description>"Min"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Min</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>15</ID>
                  <Description>"Second"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Second</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>18</ID>
                  <Description>"Time_Slot"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.Time_Slot</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>17</ID>
                  <Description>"WeatherType"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.WeatherType</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>16</ID>
                  <Description>"TotalDay"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.TotalDay</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>19</ID>
                  <Description>"RainDayIndex"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pTimeData</Address>
                  <Offsets>
                    <Offset>TimeDataOffs.RainDayIndex</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>20</ID>
              <Description>"当前耐力"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerSystem</Address>
              <Offsets>
                <Offset>PlayerSystemOffs.PlayerPower</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"最大耐力"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerSystem</Address>
              <Offsets>
                <Offset>PlayerSystemOffs.PlayerMaxPower</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"金钱"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerSystem</Address>
              <Offsets>
                <Offset>PlayerSystemOffs.PlayerCoin</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"玩家属性"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>62</ID>
                  <Description>"增加体质"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$LUA}
local value = InputNumberDialog("增加体质", "输入要增加的数值：", "")
if not value then return end

mono_invokeMethod("SX", "PlayerSaveDataController", "onSetAddPlay_Agi", pPlayerSaveDataController, {
    { type = vtSingle, value = value }, -- t_addvalue, Single
    { type = vtByte,   value = 0 }      -- IsJudgeDay, Boolean
})


{$ASM}
assert(0,66)


[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>64</ID>
                  <Description>"增加智力"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$LUA}
local value = InputNumberDialog("增加智力", "输入要增加的数值：", "")
if not value then return end

mono_invokeMethod("SX", "PlayerSaveDataController", "onSetAddPlay_Int", pPlayerSaveDataController, {
    { type = vtSingle, value = value }, -- t_addvalue, Single
    { type = vtByte,   value = 0 }      -- IsJudgeDay, Boolean
})


{$ASM}
assert(0,66)


[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>63</ID>
                  <Description>"增加欲望"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$LUA}
local value = InputNumberDialog("增加欲望", "输入要增加的数值：", "")
if not value then return end

mono_invokeMethod("SX", "PlayerSaveDataController", "onSetAddPlay_Desire", pPlayerSaveDataController, {
    { type = vtSingle, value = value }, -- t_addvalue, Single
    { type = vtByte,   value = 0 }      -- IsJudgeDay, Boolean
})


{$ASM}
assert(0,66)


[DISABLE]

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"职位数据"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$LUA}
pWorkSystem = readPointer(pPlayerSaveData) + PlayerSaveDataOffs.m_WorkSystem
WorkSystemOffs = mono_getClassFieldOffsets("SX", "WorkSystem")

{$ASM}



[DISABLE]
{$LUA}
pWorkSystem = nil
WorkSystemOffs = nil

{$ASM}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>31</ID>
              <Description>"Level"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWorkSystem</Address>
              <Offsets>
                <Offset>WorkSystemOffs.workLv</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>32</ID>
              <Description>"Exp"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWorkSystem</Address>
              <Offsets>
                <Offset>WorkSystemOffs.workExp</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"TodayWorkTime"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWorkSystem</Address>
              <Offsets>
                <Offset>WorkSystemOffs.TodayWorkTime</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>34</ID>
              <Description>"DayMaxTime"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWorkSystem</Address>
              <Offsets>
                <Offset>WorkSystemOffs.DayMaxTime</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>35</ID>
              <Description>"IsPayRaise"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWorkSystem</Address>
              <Offsets>
                <Offset>WorkSystemOffs.IsPayRaise</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>172</ID>
          <Description>"NPC 数据"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$LUA}
pNpcSystem = readPointer(pPlayerSaveData) + PlayerSaveDataOffs.m_NpcSystem
NpcSystemOffs = mono_getClassFieldOffsets("SX", "NpcSystem")

NpcSaveDataOffs = mono_getClassFieldOffsets("SX", "NpcSaveData")

{$ASM}



[DISABLE]
{$LUA}
pNpcSystem = nil
NpcSystemOffs = nil
NpcSaveDataOffs = nil

{$ASM}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>36</ID>
              <Description>"NPC 好感度（刷新数据需重新启用）"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$LUA}
local NpcDataMemRecord = AddressList.getMemoryRecordByID(36)
if not NpcDataMemRecord then return end
MemRecord.ClearChildren(NpcDataMemRecord)

local count, entryStart = mono_getDictionaryEntryStart(readPointer(pNpcSystem) + NpcSystemOffs.m_NpcData)
if count == 0 then return end

local entry = entryStart
for _ = 1, count, 1 do
    local npcName = mono_readString(entry + 0x8)
    local pNpcSaveData = readPointer(entry + 0x10)

    local header = MemRecord.CreateGroupHeader(npcName)
    header.appendToEntry(NpcDataMemRecord)

    local record = MemRecord.CreateInt(pNpcSaveData + NpcSaveDataOffs.GoodOpinionValue, "好感度总计")
    record.appendToEntry(header)


    local optionCount, optionEntryStart = mono_getDictionaryEntryStart(pNpcSaveData + NpcSaveDataOffs.CurrentTalkGoodOpinionValueDic)
    if optionCount &gt; 0 then
        local _entry = optionEntryStart
        for __ = 1, optionCount, 1 do
            local optionName = mono_readString(_entry + 0x8)
            if optionName == "1" then
                optionName = "对话"
            elseif optionName == "2" then
                optionName = "礼物"
            elseif optionName == "4" then
                optionName = "色色"
            end

            local optionRecord = MemRecord.CreateInt(_entry + 0x10, optionName)
            optionRecord.appendToEntry(header)

            _entry = _entry + 0x18
        end
    end


    record = MemRecord.CreateInt(pNpcSaveData + NpcSaveDataOffs.m_NpcSpecialValue, "NpcSpecialValue")
    record.appendToEntry(header)

    entry = entry + 0x18
end


{$ASM}



[DISABLE]

</AssemblerScript>
              <CheatEntries/>
            </CheatEntry>
            <CheatEntry>
              <ID>217</ID>
              <Description>"修改所有 NPC 总好感度"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$LUA}
local value = InputNumberDialog("修改所有 NPC 总好感度")
if not value then return end

local count, entryStart = mono_getDictionaryEntryStart(readPointer(pNpcSystem) + NpcSystemOffs.m_NpcData)
if count == 0 then return end

local entry = entryStart
for _ = 1, count, 1 do
    local pNpcSaveData = readPointer(entry + 0x10)
    writeInteger(pNpcSaveData + NpcSaveDataOffs.GoodOpinionValue, value)

    entry = entry + 0x18
end

{$ASM}
assert(0,0)



[DISABLE]
{$LUA}

{$ASM}

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"下矿"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$LUA}
local classID = mono_findClass("aqagz", "Game_Mine_BaseConfigs")
local baseAddress = mono_getClassStaticFieldAddress(classID)
local fields = mono_getClassFieldOffsets(classID)

registerSymbol("curMineToolAtk", baseAddress + fields.curMineToolAtk)
registerSymbol("curMineToolAtk_gaotou", baseAddress + fields.curMineToolAtk_gaotou)

{$ASM}



[DISABLE]
{$LUA}
unregisterSymbol("curMineToolAtk")
unregisterSymbol("curMineToolAtk_gaotou")

{$ASM}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>55</ID>
              <Description>"铁锹攻击力"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>curMineToolAtk</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>56</ID>
              <Description>"铁镐攻击力"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>curMineToolAtk_gaotou</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>51</ID>
              <Description>"工具耐久不减"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(patchAddress1, "aqagz.Game_Mine_BaseConfigs.UseMineToolDurability"+122)
define(patchAddress2, "aqagz.Game_Mine_BaseConfigs.UseMineToolDurability_gaotou"+148)
define(bytes, FF 48 1C)

[ENABLE]
assert(patchAddress1,bytes)
assert(patchAddress2,bytes)

patchAddress1:
nop 3


patchAddress2:
nop 3



[DISABLE]
patchAddress1:
db bytes
//dec [rax+1C]


patchAddress2:
db bytes
//dec [rax+1C]

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"修改奔跑速度"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(patchAddress, "GameDefine.onGetPlayerSpeed"+11C)
define(bytes, 0F 28 C6 0F 28 74 24 20)

[ENABLE]
assert(patchAddress,bytes)

alloc(newmem,2048,patchAddress)
label(returnhere)
label(originalcode)
label(exit)

label(playerSpeed)
registersymbol(playerSpeed)

newmem: //this is allocated memory, you have read,write,execute access
movss xmm6,[playerSpeed]

originalcode:
movaps xmm0,xmm6
movaps xmm6,[rsp+20]

exit:
jmp returnhere

playerSpeed:
dd (float)8.0

patchAddress:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
unregistersymbol(playerSpeed)

dealloc(newmem)
patchAddress:
db bytes
//movaps xmm0,xmm6
//movaps xmm6,[rsp+20]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>60</ID>
              <Description>"奔跑速度"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>playerSpeed</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"使用物品数量不减"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(patchAddress, "SX.PlayerSaveDataController.onRemoveBag"+118)
define(bytes, 2B 46 18 41 89 46 18)

[ENABLE]
assert(patchAddress,bytes)

patchAddress:
nop 7

 
 
[DISABLE]
patchAddress:
db bytes
//sub eax,[rsi+18]
//mov [r14+18],eax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>58</ID>
          <Description>"增加获取物品的数量"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(patchAddress, "SX.PlayerSaveDataController.onAddBag"+1FD)
define(bytes, 41 8B 4E 18 03 4E 18)

[ENABLE]
assert(patchAddress,bytes)

alloc(newmem,2048,patchAddress)
label(returnhere)
label(originalcode)
label(exit)

label(addItemCount)
registersymbol(addItemCount)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov ecx,[r14+18]
add ecx,[addItemCount]
//add ecx,[rsi+18]

exit:
jmp returnhere

addItemCount:
dd (int)100

patchAddress:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
unregistersymbol(addItemCount)

dealloc(newmem)
patchAddress:
db bytes
//mov ecx,[r14+18]
//add ecx,[rsi+18]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>79</ID>
              <Description>"增加数量"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>addItemCount</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>80</ID>
          <Description>"解锁全部回忆（临时）"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(unlockInvite, "SX.PlayerSaveDataController.onIsUnlockInvite"+5B)
define(unlockMerory, "SX.PlayerSaveDataController.onIsUnlockMerory"+5B)
define(unlockPaint, "SX.PlayerSaveDataController.onIsUnlockPaint"+5B)
define(unlockPhoto, "SX.PlayerSaveDataController.onIsUnlockPhoto"+5B)

define(originalBytes, 84 C0 0F 95 C0)
//test al,al
//setne al

define(patchBytes, B0 01 0F 1F 00)
//mov al,1
//nop 3

[ENABLE]
assert(unlockInvite,originalBytes)
assert(unlockMerory,originalBytes)
assert(unlockPaint,originalBytes)
assert(unlockPhoto,originalBytes)

unlockInvite:
db patchBytes

unlockMerory:
db patchBytes

unlockPaint:
db patchBytes

unlockPhoto:
db patchBytes



[DISABLE]
unlockInvite:
db originalBytes

unlockMerory:
db originalBytes

unlockPaint:
db originalBytes

unlockPhoto:
db originalBytes

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>local function AddCompactMenu(defaultCompact)
    if compactMenuItem then return end

    local state = not defaultCompact
    local mainForm = getMainForm()
    local toggleView = function()
        compactMenuItem.Caption = state and "[ 精简视图 ]" or "[ 完整视图 ]"
        mainForm.Splitter1.Visible = state
        mainForm.Panel4.Visible = state
        mainForm.Panel5.Visible = state
    end

    local menuParent = mainForm.Menu.Items
    compactMenuItem = createMenuItem(menuParent)
    menuParent.add(compactMenuItem)
    compactMenuItem.OnClick = function()
        state = not state
        toggleView()
    end
    toggleView()
end

AddCompactMenu(true)

function OpenGameProcess(processName, enableMono)
    local pid = getProcessIDFromProcessName(processName)
    if not pid then
        showMessage("先启动游戏，然后重新开启此选项")
        return false
    end
    if getOpenedProcessID() ~= pid then
        openProcess(pid)
    end
    if enableMono then
        if LaunchMonoDataCollector() == 0 then
            showMessage("激活 Mono 功能失败！")
            return false
        end
    end
    return true
end

function InputNumberDialog(caption, prompt, initialstring)
    local input = inputQuery(caption, prompt or "", initialstring or "")
    if not input then
        return nil
    end

    local value = tonumber(input)
    if not value then
        showMessage("数值格式错误！")
        return nil
    end

    return value
end

function mono_getClassInstance(classId_or_namespace, className)
    local classID = classId_or_namespace
    local namespace = classId_or_namespace
    if className then
        classID = mono_findClass(namespace, className)
    else
        namespace = mono_class_getNamespace(classID)
    end

    local instance = mono_class_findInstancesOfClassListOnly(namespace, classID)
    if not instance or #instance == 0 then
        return nil
    end
    return instance[1]
end

function mono_getClassFieldOffsets(classId_or_namespace, className)
    local classID = classId_or_namespace
    local namespace = classId_or_namespace
    if className then
        classID = mono_findClass(namespace, className)
    end

    local fields = mono_class_enumFields(classID)
    if not fields or #fields == 0 then
        return nil
    end

    local t = {}
    for i = 1, #fields do
        t[fields[i].name] = fields[i].offset
    end
    return t
end

function mono_getClassStaticFieldAddress(classId_or_namespace, className)
    local classID = classId_or_namespace
    local namespace = classId_or_namespace
    if className then
        classID = mono_findClass(namespace, className)
    end

    local domains = mono_enumDomains()
    if not domains or #domains == 0 then
        return nil
    end

    local domain = mono_enumDomains()[1]
    return mono_class_getStaticFieldAddress(domain, classID)
end

function mono_getClassStaticFields(classId_or_namespace, className)
    local classID = classId_or_namespace
    local namespace = classId_or_namespace
    if className then
        classID = mono_findClass(namespace, className)
    end

    local domains = mono_enumDomains()
    if not domains or #domains == 0 then
        return nil
    end

    local domain = mono_enumDomains()[1]
    local staticBaseAddress = mono_class_getStaticFieldAddress(domain, classID)


    local fields = mono_class_enumFields(classID)
    if not fields or #fields == 0 then
        return nil
    end

    local t = {}
    for i = 1, #fields do
        local field = fields[i]
        if field.isStatic then
            t[field.name] = staticBaseAddress + field.offset
        end
    end
    return t
end

function mono_readString(stringPtr)
    return mono_string_readString(readPointer(stringPtr))
end

function mono_getDictionaryEntryStart(dictionaryPtr)
    local object = readPointer(dictionaryPtr)
    local count = readInteger(object + 0x20)
    local entries = readPointer(object + 0x18)
    return count, entries + 0x20
end

function mono_invokeMethod(namsespace, className, methodName, instance, args)
    local methodId = mono_findMethod(namsespace, className, methodName)
    if not methodId then
        showMessage("Not found method!")
        return
    end
    return mono_invoke_method(namsespace, methodId, instance, args)
end

MemRecord = {}

MemRecord.CreateInt = function(address, description)
    local record = AddressList.createMemoryRecord()
    record.Type = vtDword
    record.Address = address
    record.Description = description
    record.ShowAsSigned = true
    record.DontSave = true
    return record
end

MemRecord.CreateGroupHeader = function(description)
    local record = AddressList.createMemoryRecord()
    record.Description = description
    record.IsGroupHeader = true
    record.Options = "[moHideChildren]"
    record.DontSave = true
    return record
end

MemRecord.ClearChildren = function(memRecord)
    local count = memRecord.Count
    if count &gt; 0 then
        for i = count - 1, 0, -1 do
            memRecord.Child[i].destroy()
        end
    end
end

</LuaScript>
</CheatTable>
